package com.sing.jvm.classloader;

/**
 * 一、类加载过程
 * 1.加载
 * --Java虚拟机将.class文件读入内存（放在运行时区域的方法区内），并根据字节流为之创建一个Class对象（放在堆中）
 * （任何类被使用时系统都会为其创建一个且仅有一个Class对象）
 * （这个Class对象描述了这个类创建出来的对象的所有信息，比如有哪些构造方法、哪些成员方法，哪些成员变量）
 * 2.验证
 * --保证Class文件的字节流包含的信息符合JVM规范。验证过程主要分为四个阶段
 * （文件格式验证：验证字节流文件是否符合Class文件格式的规范，并且能被当前虚拟机正确的处理）
 * （元数据验证：是对字节码描述的信息进行语义分析，以保证其描述的信息符合Java语言的规范要求）
 * （字节码验证：主要是进行数据流和控制流的分析，保证被校验类的方法在运行时不会危害虚拟机）
 * （符号引用验证：符号引用验证发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将在解析阶段中发生）
 * 3.准备
 * --准备阶段为变量分配内存并设置类变量的初始化。
 * （在这个阶段分配的仅为类的变量，而不包含类的实例变量。对已非final的变量，JVM会将其设置成“零值”，而不是其赋值语句的值：
 * private static int size = 12。那么在这个阶段，size的值为0，而不是12。但final修饰的类变量将会赋值成真实的值）
 * 4.解析
 * --解析过程是将常量池内的符号引用替换成直接引用。
 * （类或接口的解析、字段解析、方法解析、接口方法解析）
 * 5.初始化
 * --初始化则是为标记为常量值的字段赋值的过程。换句话说，只对static修饰的变量或语句块进行初始化
 * （如果初始化一个类的时候，其父类尚未初始化，则优先初始化其父类。）
 * （如果同时包含多个静态变量和静态代码块，则按照自上而下的顺序依次执行）
 */
public class T03ClassLoadingProcedure {

    public static void main(String[] args) {
        System.out.println(Test.count);
    }
}

class Test{
    public static Test test = new Test();
    public static int count = 2;
    // new的时候先申请内存（此时是默认值0），然后调用构造方法赋值为8
    private int m = 8;

    {
        System.out.println(m);
    }
    private Test(){
        System.out.println("构造方法");
        count++;
    }
}
